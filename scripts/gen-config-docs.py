#!/usr/bin/env python3
"""Generate configuration documentation from RAGConfig using Jinja2 templates."""
import sys
import os
from pathlib import Path
sys.path.append(str(Path(__file__).parent.parent))

from src.obelisk.rag.common.config import RAGConfig
import inspect
import re
from jinja2 import Template

# Configuration documentation template
CONFIG_TEMPLATE = Template("""## Configuration Reference

!!! info "Configuration Sources"
    Configuration is loaded in the following order (later sources override earlier):
    
    1. Default values in `RAGConfig`
    2. Environment variables
    3. Runtime configuration

### Vector Storage Configuration

=== "Milvus"

    ```python
    # (1)!
    {% for var in milvus_vars -%}
    {{ var.name }}={{ var.default }}
    {% endfor %}
    ```

    1. Milvus uses HNSW indexing for efficient similarity search

=== "Connection Settings"

    | Environment Variable | Default | Description |
    |---------------------|---------|-------------|
    {% for var in milvus_vars -%}
    | `{{ var.name }}` | `{{ var.default }}` | {{ var.description }} |
    {% endfor %}

### Model Provider Configuration

{% for provider in providers %}
=== "{{ provider.name }}"

    ```python
    {% for line in provider.config -%}
    {{ line }}
    {% endfor %}
    ```
    {% if provider.notes %}
    {% for note in provider.notes %}
    {{ note }}
    {% endfor %}
    {% endif %}

{% endfor %}

### Complete Configuration Reference

<details>
<summary>All Environment Variables</summary>

| Environment Variable | Config Key | Type | Default |
|---------------------|------------|------|---------|
{% for var in all_vars -%}
| `{{ var.env }}` | `{{ var.key }}` | `{{ var.type }}` | {{ var.default }} |
{% endfor %}

</details>
""")

def extract_config():
    """Extract configuration with defaults and environment mappings."""
    # Extract environment variables from source
    source = inspect.getsource(RAGConfig._load_from_env)
    env_vars = re.findall(r'os\.getenv\("([^"]+)"[^,]*,\s*"([^"]*)"', source)
    
    # Organize variables by category
    milvus_vars = [
        {"name": "MILVUS_HOST", "default": "milvus", "description": "Milvus server hostname"},
        {"name": "MILVUS_PORT", "default": "19530", "description": "Milvus server port"},
        {"name": "MILVUS_COLLECTION", "default": "obelisk_rag", "description": "Collection name"},
        {"name": "MILVUS_USER", "default": "default", "description": "Milvus username"},
        {"name": "MILVUS_PASSWORD", "default": "Milvus", "description": "Milvus password"},
    ]
    
    providers = [
        {
            "name": "LiteLLM (Default)",
            "config": [
                "MODEL_PROVIDER=litellm  # (1)!",
                "LITELLM_API_BASE=http://litellm:4000",
                "LITELLM_API_KEY=<generated-token>  # (2)!",
                "FORCE_LITELLM_PROXY=true"
            ],
            "notes": [
                "",
                "1. LiteLLM provides unified access to multiple LLM providers",
                "2. Token is auto-generated by init-service container"
            ]
        },
        {
            "name": "Ollama (Hardware Tuning)",
            "config": [
                "# Use X-Provider-Override header",
                "X-Provider-Override: ollama",
                "OLLAMA_URL=http://ollama:11434",
                "OLLAMA_MODEL=llama3"
            ],
            "notes": []
        },
        {
            "name": "OpenAI (Direct)",
            "config": [
                "OPENAI_API_KEY=sk-...",
                "OPENAI_MODEL=gpt-4o"
            ],
            "notes": []
        }
    ]
    
    # Build complete variable list
    all_vars = []
    for env, default in env_vars:
        all_vars.append({
            "env": env,
            "key": env.lower(),
            "type": "str",
            "default": f"`{default}`" if default else "None"
        })
    
    # Render template
    output = CONFIG_TEMPLATE.render(
        milvus_vars=milvus_vars,
        providers=providers,
        all_vars=sorted(all_vars, key=lambda x: x["env"])
    )
    
    print(output)

if __name__ == "__main__":
    extract_config()